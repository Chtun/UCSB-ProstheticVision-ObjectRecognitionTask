// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel RendPercepts

#define tau1 .00042f
#define tau2   .00045f
#define tau3   .0002625f
#define eps   0.0f 
#define tau_ca   3.0f
#define beta   0.83f 
#define electrodeThreshold .1
#define numberPixelsForElectrodeDisplay 0

    struct SimulationVariables
    {
       float r1; 
       float r2;
       float r3;
       float ca;
       float r4a;
       float r4b;
       float r4c;
       float t;  
    };
    struct AxonSegment
    {
        int x;
        int y;  
        float brightnessContribution;
    };
    struct Electrode
    {
        float x;
        float y; 
        float current; 
    };
    
    RWTexture2D<float4> viewTex;
    
    uniform RWStructuredBuffer<SimulationVariables> simulationVariables : register(u1); 
    uniform RWStructuredBuffer<Electrode> electrodesBuffer : register(u2);
    
    StructuredBuffer<AxonSegment> axonContributionBuffer;
    StructuredBuffer<int> axonIdxStartBuffer;
    StructuredBuffer<int> axonIdxEndBuffer;
    StructuredBuffer<int> idxStartBuffer;
    StructuredBuffer<int> idxEndBuffer; 
    
    uint xElectrodes;
    uint yElectrodes; 
    uint numberElectrodes; 
    uint resolution1D;  
    float implant_fov; 
    float headset_fov; 
    float degreeToMicronMultiplier; 
    float rho;
    float amplitudeMultiplier;
    float threshold;
    float xPixelSizeDivBy2;
    float yPixelSizeDivBy2;  
    float dt; 
    uint frameDur; 
    uint timeStepsBetweenPulses;
    uint posStart;
    uint posEnd;
    uint negStart;
    uint negEnd; 
    uint xResolution;
    uint yResolution; 
    float minimumScreenPositionX;
    float maximumScreenPositionX;
    float minimumScreenPositionY;
    float maximumScreenPositionY;
    uint downscaleFactor;
    
    float screenPosToDegree(float screenPos)
    {
        return (screenPos - 0.5f) * headset_fov; 
    }
     float degreeToMicron(float degree)
    {
       
        float sign = degree >= 0 ? 1.0f : -1.0f;
        degree = abs(degree); 
        float micron = 0.268f * degree + 3.427e-4f * (float) pow(degree,2) - 8.3309e-6f * (float) pow(degree,3);
        micron = 1e3f * micron; 
        return micron * sign;
    }
    float screenPosToMicron(float screenPos)
    {
        return degreeToMicron(screenPosToDegree(screenPos)); 
    }
    float distance2(float2 x1y1, float2 x2y2){
        float screenToRetinaConversion = 288 * headset_fov; 
        /*float xDist = screenPosToMicron(x1y1.x) - screenPosToMicron(x2y2.x); 
        float yDist = screenPosToMicron(x1y1.y) - screenPosToMicron(x2y2.y);*/
        float xDist = (x1y1.x - x2y2.x) * screenToRetinaConversion;
        float yDist = (x1y1.y - x2y2.y) * screenToRetinaConversion;
        float xDist2 = xDist * xDist;
        float yDist2 = yDist * yDist;
        float dist2 =  xDist2 + yDist2; 
        if(dist2 == 0.0){
            dist2=.00000000000001; 
        }
        return dist2;
    } 
     uint pixelNumberX( float screenPos){
        return (int) (xResolution * screenPos);
    }  
    uint pixelNumberY( float screenPos){
        return (int) (yResolution * screenPos);
    }  

[numthreads(16,8,1)]
void RendPercepts (uint3 id : SV_DispatchThreadID)
{
    if(id.x < minimumScreenPositionX || id.x > maximumScreenPositionX || id.y < minimumScreenPositionY || id.y > maximumScreenPositionY) {
        return; 
    }

    uint xPixel = id.x/downscaleFactor;
    uint yPixel = id.y/downscaleFactor;
    uint loc1D = xPixel + ((xResolution * implant_fov/headset_fov)+1) * yPixel;  // add +1 for pixel at each end of simulation (ie. -20 deg and 20 deg)
    float dist2;
    float gauss;
    float amplitude = 0.0f; 
    float amp = 0.0f; 
    float maxR3 = 0; 
    
    for(uint j=0; j<numberElectrodes; j++){
            dist2 = distance2(float2(xPixel/xResolution, yPixel/yResolution), float2(electrodesBuffer[j].x, 1 - electrodesBuffer[j].y /* screen pos y is inverted vs cartesian coord */));
            gauss = exp(-dist2 / (2 * rho * rho));
            amplitude = amplitude + (gauss * electrodesBuffer[j].current);  
    }
    
    for(int l=0; l<frameDur; l++){
        if(simulationVariables[loc1D].t >= timeStepsBetweenPulses){
            simulationVariables[loc1D].t = 0; 
        }
        amp = 0.0f; 
        if((simulationVariables[loc1D].t >= posStart) && (simulationVariables[loc1D].t <= posEnd)){
            amp = amplitudeMultiplier * amplitude;
        }
        if((simulationVariables[loc1D].t >= negStart) && (simulationVariables[loc1D].t <= negEnd)){
            amp = -amplitudeMultiplier * amplitude; 
        }
        // Fast ganglion cell response (convolve with gamma function
        // that has decay constant tau1):
        simulationVariables[loc1D].r1 = simulationVariables[loc1D].r1 + dt * (-amp - simulationVariables[loc1D].r1) / tau1;
       
        // Charge accumulation is now also a gamma function (over 3 seconds)
        // so that brightness can recover after a while:
        simulationVariables[loc1D].ca = simulationVariables[loc1D].ca + dt * (eps * max(amp, 0) - simulationVariables[loc1D].ca) / tau_ca;
        simulationVariables[loc1D].r2 = simulationVariables[loc1D].r2 + dt * (simulationVariables[loc1D].ca - simulationVariables[loc1D].r2) / tau2;
        
        // Half-rectification and power nonlinearity:
        simulationVariables[loc1D].r3 = pow(max(simulationVariables[loc1D].r1 - eps * simulationVariables[loc1D].r2, 0), beta);
        if(simulationVariables[loc1D].r3 > maxR3){
            maxR3 = simulationVariables[loc1D].r3;
        }
        simulationVariables[loc1D].t++; 
    }
    if(maxR3 < threshold){
        maxR3 = 0; 
    }
    
    float4 col;
    
    col.r =  maxR3;
    col.b = maxR3;
    col.g = maxR3;
    col.a = 1.0; 
    viewTex[id.xy] = col;
}
    
